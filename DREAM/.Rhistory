text(positions+.5, 1.1333, stars, cex=2)
text(positions, -0.05, "NBP", cex=1, srt=-45)
text(positions+1, -0.05, "BP", cex=1, srt=-45)
plot(1,1,xlim=c(.5,length(types)*3-.5),
ylim=c(-0.1,1.15),
type="n",
xlab="",
ylab="",
axes=FALSE,
xaxt="n",
main=heading,
cex.main=1.5)
axis(side=2, at=0:5/5)
mtext(panel_label, side=3, line=2, at=panel_pos, cex=2)
text(positions+.5, 1.0666, labels, cex=1)
text(positions+.5, 1.1333, stars, cex=2)
text(positions, -0.05, "NBP", cex=1, srt=-45)
text(positions+1, -0.05, "BP", cex=1, srt=-45)
labels
labels <- c("hoh")
text(positions+.5, 1.0666, labels, cex=1)
text(positions+.5, 1.1333, stars, cex=2)
text(positions, -0.05, "NBP", cex=1, srt=-45)
text(positions+1, -0.05, "BP", cex=1, srt=-45)
plot(1,1,xlim=c(.5,length(types)*3-.5),
ylim=c(-0.1,1.15),
type="n",
xlab="",
ylab="",
axes=FALSE,
xaxt="n",
main=heading,
cex.main=1.5)
axis(side=2, at=0:5/5)
mtext(panel_label, side=3, line=2, at=panel_pos, cex=2)
text(positions+.5, 1.0666, labels, cex=1)
text(positions+.5, 1.1333, stars, cex=2)
text(positions, -0.05, "NBP", cex=1, srt=-45)
text(positions+1, -0.05, "BP", cex=1, srt=-45)
stars
?plot
?par
pdf(file, height=14, width=14, useDingbats=F)
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
pdf("test", height=14, width=14, useDingbats=F)
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
par('cex')
hist(c(1,2,2,2,2,2,2,))
hist(c(1,2,2,2,2,2,2,5))
dev.off()
dev.off()
hist(c(1,2,2,2,2,2,2,5))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
hist(c(1,2,2,2,2,2,2,5))
hist(c(1,2,2,2,2,2,2,5))
hist(c(1,2,2,2,2,2,2,5))
par('cex')
par('ps')
par(mfrow=c(1,1))
par('cex')
par('ps')
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
par('cex')
par('ps')
dev.off()
par('cex')
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
par
par()
dev.off()
par.old <- par()
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
par
par()==par.old
par()
pdf("test", height=14, witdth=14)
pdf("test", height=14, width=14)
par()
pdf("test", height=7, width=14)
par()
?text
?plot
?par
plot(c(0,1), c(0,1),
main=expression(paste(italic("ahah"), " hoa", "\n boo")))
plot(1:4,1:4)
lines(1:4,4:1, col="blue")
legend("top",leg=c("a","b"),col=c("black","blue"), fill=TRUE)
legend(leg=c("a","b"),col=c("black","blue"), fill=TRUE)
legend(2.5, 1.5,leg=c("a","b"),col=c("black","blue"), fill=TRUE)
legend(2.5, 1.5,leg=c("a","b"),col=c("black","blue"))
legend(2.5, 1.5,leg=c("a","b"),col=c("black","blue"), fill=c("black", "blue"))
rgb(0,176,240)
rgb(0,176,240, maxColorValue=255)
"red"
rgb("red")
rgb(0,255,0, maxColorValue=255)
rgb(0,255,0, maxColorValue=255)
rgb(0,176,240, maxColorValue=255)
rgb(255,0,0, maxColorValue=255)
rgb(0,255,255, maxColorValue=255)
legend(2.5, 1.5,leg=c("a","b"),
fill=c("black", "blue"))
legend(2.5, 3,leg=c("a","b"),
fill=c("black", "blue"))
?legend
plot(1:4,1:4)
lines(1:4,4:1, col="blue")
legend(2.5, 3,leg=c("a","b"),
fill=c("black", "blue"), border="white", bty="n")
rgb(255,255,0, maxColorValue=255)
?par
?expression
library(ggplot2)
library(grid)
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
plot1 <- qplot(mtcars,x=wt,y=mpg,geom="point",main="Scatterplot of wt vs. mpg")
plot2 <- qplot(mtcars,x=wt,y=disp,geom="point",main="Scatterplot of wt vs disp")
plot3 <- qplot(wt,data=mtcars)
plot4 <- qplot(wt,mpg,data=mtcars,geom="boxplot")
plot5 <- qplot(wt,data=mtcars)
plot6 <- qplot(mpg,data=mtcars)
plot7 <- qplot(disp,data=mtcars)
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1, vp = vplayout(1, 1))
print(plot2, vp = vplayout(1, 2))
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1, vp = vplayout(1, 1))
attach(mtcars)
plot1 <- qplot(mtcars,x=wt,y=mpg,geom="point",main="Scatterplot of wt vs. mpg")
plot2 <- qplot(mtcars,x=wt,y=disp,geom="point",main="Scatterplot of wt vs disp")
plot3 <- qplot(wt,data=mtcars)
plot4 <- qplot(wt,mpg,data=mtcars,geom="boxplot")
plot5 <- qplot(wt,data=mtcars)
plot6 <- qplot(mpg,data=mtcars)
plot7 <- qplot(disp,data=mtcars)
# 4 figures arranged in 2 rows and 2 columns
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1, vp = vplayout(1, 1))
print(plot2, vp = vplayout(1, 2))
print(plot3, vp = vplayout(2, 1))
print(plot4, vp = vplayout(2, 2))
# One figure in row 1 and two figures in row 2
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot5, vp = vplayout(1, 1:2))
print(plot6, vp = vplayout(2, 1))
print(plot7, vp = vplayout(2, 2))
print(plot7, vp = vplayout(2, 2))
print(plot7, vp = vplayout(2, 2))
print(plot7, vp = vplayout(2, 2))
print(plot7, vp = vplayout(2, 2))
print(plot7, vp = vplayout(2, 2))
biocLite('BRugs')
source("http://bioconductor.org/biocLite.R")
biocLite('BRugs')
biocLite('CODA')
biocLite('coda')
library(BRugs)
biocLite('BRugs')
biocLite('coda')
library(BRugs)
help(BRugs)
library(BRugs)
library(BRugs)
biocLite('BRugs')
library()
library(BRugs)
library("BRugs")
library(BRugs)
?matrix
T <- matrix(.8,.2,.7.3,nrow=1,ncol=2)
T <- matrix(c(.8,.2,.7,.3),nrow=1,ncol=2)
T
T <- matrix(c(.8,.2,.7,.3),nrow=2,ncol=2)
T
T <- matrix(c(.8,.7,.2,.3),nrow=2,ncol=2)
T
s0 %*% T
s0 <- c(.6,.4)
s0 %*% T
M <- matrix(c(0,.16,.5,.34,.45,.25,.25,.05), nrow=2, ncol=4)
s0 %*% T %*% M
s0 %*% T^2 %*% M
for(i in 1:10) {
print(s0 %*% T^i %*% M)
}
?choose
?rand
??rand
sample(1:4,10)
sample(1:4,10, replace=T)
sample(1:4,10, replace=TRUE)
sample(c('L','V','D','K'),10, replace=TRUE)
sample(c('L','V','D','K'),12, replace=TRUE)
rep('hep', 4)
paste(rep('j', 4), collapse=T)
paste(rep('j', 4), collapse="")
paste(rep('j', 4), collapse='')
paste(rep('j', 4), collapse=' ')
i <- 1:4
i
paste(rep('j', 4), i, collapse=' ')
paste(rep('j_', 4), i, collapse='')
paste(rep('j_', 4), i, sep='', collapse=' ')
paste(rep('j_', 4), 1:4, sep='', collapse=' ')
1:10-1
a <- 1:10
a[-1]
i <- 2
a[-i]
sign(a)
sign(c(-1,-3,34,.001))
data.frame(a=c(1,2,3), b=c(-1,2,2))
df <- data.frame(a=c(1,2,3), b=c(-1,2,2))
df
print(df)
?data.frame
df <- data.frame(a=c(1,2,3), b=c(-1,2,2))
1:1-
1:1-0
1:10
length(1:10)
sample
sample(1:5, 3, replace=T, prob=c(.5,.5,0,0,0))
sample(1:5, 3, replace=T, prob=c(.5,.5,0,0,0))
sample(1:5, 3, replace=T, prob=c(.5,.5,0,0,0))
sample(1:5, 3, replace=T, prob=c(.5,.5,0,0,0))
sample(1:5, 3, replace=T, prob=c(.5,.4,.1,0,0))
sample(1:5, 3, replace=T, prob=c(.5,.4,.1,0,0))
sample(1:5, 3, replace=T, prob=c(.5,.4,.1,0,0))
sample(1:5, 3, replace=T, prob=c(.5,.4,.1,0,0))
sample(1:5, 3, replace=T, prob=c(.5,.4,.1,0,0))
sample(1:5, 3, replace=T, prob=c(.5,.4,.1,0,0))
ln(2)
log(2)
?log
log(2.14)
log(2.71)
170-100
70/15
d <- function(vec1, vec2) sqrt(sum((vec1-vec2)^2))
d(c(0,sqrt(3)-1/sqrt(3),0), c(0,0,1))
d(c(1,-1/sqrt(3),0), c(0,0,1))
d(c(-1,-1/sqrt(3),0), c(0,0,1))
d(c(-1,-1/sqrt(3),0), c(-1,-1/sqrt(3),0))
d(c(-1,-1/sqrt(3),0), c(1,-1/sqrt(3),0))
d(c(-1,-1/sqrt(3),0), c(0,sqrt(3)-1/sqrt(3),0))
d(c(-1,-1/sqrt(3),0), c(0,0,2sqrt(2/3))
d(c(-1,-1/sqrt(3),0), c(0,0,2*sqrt(2/3))
)
d(c(-1,-1/sqrt(3),0), c(0,0,2*sqrt(2/3)))
v1 <- c(0,4)
v2 <- c(2,-1)
v3 <- c(-1,-1)
alpha <- c(-.02,.15,-.14)
w <- (-.02)*v1+.15*v2+(-.14)*v3
w
v <- cbind(v1,v2,v3)
alpha %*% v
v <- cbind(v1,v2,v3)
v
v <- rbind(v1,v2,v3)
alpha %*% v
d <- function(vec1, vec2) sqrt(sum((vec1-vec2)^2))
d(c(2,-1), (-23/26,-11/26))
d(c(2,-1), c(-23/26,-11/26))
x1 <- c(3,3,2)
x2 <- c(1,1,4)
x3 <- c(5,1,5)\
x3 <- c(5,1,5)
x4 <- c(4,0,0)
x5 <- c(0,6,1)
m1 <- c(3,3,2)
m2 <- c(4,0,0)
d(x1,m1)
d(x2,m1)
2*sqrt(3)
d(x3,m1)
sqrt(17)
d(x4,m1)
sqrt(14)
sqrt(19)
d(x5,m1)
sqrt(14)
d(x1,m2)
sqrt(26)
d(x2,m2)
sqrt(27)
d(x3,m2)
d(x4,m2)
d(x5,m2)
sqrt(53)
cen <- rbind(m1, m2)
cen
train <- rbind(x1,x2,x3,x4,x5)
train
close_cen <- function(point, cen) {
#calculate the distances between a point and each center
d.vec <- apply(cen, 1, d, point)
which.min(d.vec)
#If there is a tie, the first closest distance is used, this should
#be random since the centroids were randomly placed
}
apply(train, 1, close_cen, cen)
k <- 5
k <- 2
n_cen <- matrix(-1, nrow=2, ncol=3)
for(i in 1:k) {n_cen[i,] <- apply(train, 2, mean)}
n_cen
clust
clust <- apply(train, 1, close_cen, cen)
clust
clust <- apply(train[clust==i,], 1, close_cen, cen)
for(i in 1:k) {n_cen[i,] <- apply(train[clust==i,], 2, mean)}
n_cen
9/4
train[clus==2]
train[clust==2]
apply(train[clust==2,], 2, mean)
n_cen
n_cen[2,] <- c(4,0,0)
entropy <- function(vector) {
classes <- unique(vector)
ent <- 0
for(i in 1:length(classes)) {
p <- sum(vector==classes[i])/length(vector)
ent <- ent + p*log2(p)
}
-1 * ent
}
entropy(n_cen)
classes
entropy(n_cen[1,])
unique(n_cen[1,])
entropy(c(1,1,2,3))
entropy(c(1)
)
sum(1:10)
10/55
9/55
7.5/55
4/55
2/55
6/55
5/55
3/55
1/55
40/202
20/202
12/202
50/202
4/202
26/202
20/202
18/202
10/202
2/202
source("http://bioconductor.org/biocLite.R")
biocLite("GeneNet")
library("GeneNet")
data(ecoli)
biocLite('fdrtool')
biocLite('fdrtool')
source("http://bioconductor.org/biocLite.R")
biocLite('fdrtool')
biocLite('fdrtool')
x <- 1:1000/1000
x
y <- x^3/(1+x^3)
plot(x,y)
x <- 1:2000/1000
y <- x^3/(1+x^3)
plot(x,y)
y <- x^10/(1+x^10)
plot(x,y)
y <- x^100/(1+x^100)
plot(x,y)
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite("BiocUpgrade")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite('l1ktools')
source("http://bioconductor.org/biocLite.R")
biocLite('biocUpdate')
biocLite('l1ktools')
biocLite("GENE.E")
source("http://bioconductor.org/biocLite.R")
biocLite('GENE.E')
library(GENE.E)
source("http://bioconductor.org/biocLite.R")
biocLite('spatial')
x <- runif(100,1,10)
x
y <- runif(100,1,10)
plot(x,y)
biocLite('spatial')
source("http://bioconductor.org/biocLite.R")
biocLite('spatial')
library('spatial')
data(topo, package="MASS")
topo.kr <- surf.ls(2, topo)
correlogram(topo.kr, 25)
d <- seq(0, 7, 0.1)
lines(d, expcov(d, 0.7))
topo
topo.kr
x <- runif(100,1,10)
y <- runif(100,1,10)
plot(x,y)
set.seed(2)             #sets the seed for random number generation.
x <- 1:100              #creates a vector x with numbers from 1 to 100
ex <- rnorm(100, 0, 30) #100 normally distributed rand. nos. w/ mean=0, s.d.=30
ey <- rnorm(100, 0, 30) # " "
y <- 30 + 2 * x         #sets y to be a vector that is a linear function of x
x_obs <- x + ex         #adds "noise" to x
y_obs <- y + ey         #adds "noise" to y
P <- cbind(x_obs,y_obs) #places points in matrix
plot(P,asp=1,col=1) #plot points
points(mean(x_obs),mean(y_obs),col=3, pch=19) #show center
M <- cbind(x_obs-mean(x_obs),y_obs-mean(y_obs))#centered matrix
M
MCov <- cov(M)          #creates covariance matrix
eigenValues <- eigen(MCov)$values       #compute eigenvalues
eigenVectors <- eigen(MCov)$vectors     #compute eigenvectors
d <- svd(M)$d          #the singular values
v <- svd(M)$v          #the right singular vectors
d
v
lines(x_obs,eigenVectors[2,1]/eigenVectors[1,1]*M[x]+mean(y_obs),col=8)
lines(x_obs,eigenVectors[2,2]/eigenVectors[1,2]*M[x]+mean(y_obs),col=8)
lines(x_obs,-1/(eigenVectors[2,1]/eigenVectors[1,1])*M[x]+mean(y_obs),col=8)
trans <- (M%*%v[,1])%*%v[,1] #compute projections of points
P_proj <- scale(trans, center=-cbind(mean(x_obs),mean(y_obs)), scale=FALSE)
points(P_proj, col=4,pch=19,cex=0.5) #plot projections
segments(x_obs,y_obs,P_proj[,1],P_proj[,2],col=4,lty=2) #connect to points
x <- rev(rep(6:10, 1:5))
x
rep(6:10, 1:5)
rle(x)
seqinfo <- Seqinfo(paste0("chr", 1:3), c(1000, 2000, 1500), NA, "mock1")
gr <-
GRanges(seqnames =
Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
ranges = IRanges(
1:10, width = 10:1, names = head(letters,10)),
strand = Rle(
strand(c("-", "+", "*", "+", "-")),
c(1, 2, 2, 3, 2)),
score = 1:10,
GC = seq(1, 0, length=10),
seqinfo=seqinfo)
gr
library(bsseq)
source("http://bioconductor.org/biocLite.R")
biocLite('bsseq')
library(granges)
library('GRanges')
library('bsseq')
gr <-
GRanges(seqnames =
Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
ranges = IRanges(
1:10, width = 10:1, names = head(letters,10)),
strand = Rle(
strand(c("-", "+", "*", "+", "-")),
c(1, 2, 2, 3, 2)),
score = 1:10,
GC = seq(1, 0, length=10),
seqinfo=seqinfo)
gr
#Playing with DREAM 9 gene essentiality prediction data
Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4))
IRanges(
1:10, width = 10:1, names = head(letters,10))
Rle(
strand(c("-", "+", "*", "+", "-")),
c(1, 2, 2, 3, 2))
seqinfo <- Seqinfo(paste0("chr", 1:3), c(1000, 2000, 1500), NA, "mock1")
gr <-
GRanges(seqnames =
Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
ranges = IRanges(
1:10, width = 10:1, names = head(letters,10)),
strand = Rle(
strand(c("-", "+", "*", "+", "-")),
c(1, 2, 2, 3, 2)),
score = 1:10,
GC = seq(1, 0, length=10),
seqinfo=seqinfo)
gr
head(letters, 10)
strand(c("-", "+", "*", "+", "-"))
?strand
Rle(strand(c("-", "+", "*", "+", "-")))
Rle(c("-", "+", "*", "+", "-"))
gr
seqinfor
seqinfo
setwd("C:/Users/lazar/Desktop/DREAM")
CopyTrain <- read.table("CCLE_copynumber_training.gct", skip=2, header=T,
sep="\t")
CopyTrain[1:10,1:5]
ExpTrain <- read.table("CCLE_expression_training.gct", skip=2, header=T,
sep="\t")
ExpTrain[1:10,1:5]
colnames(ExpTrain)
